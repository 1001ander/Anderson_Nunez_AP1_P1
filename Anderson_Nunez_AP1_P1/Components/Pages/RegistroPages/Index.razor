@page "/Registro/Index"
@using Anderson_Nunez_AP1_P1.Models
@inject RegistroService registroService
@inject NavigationManager navigationManager
@rendermode InteractiveServer


<div class="container">
    
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-between align-items-center position-relative">
            <h5 class="card-title mb-0 text-center w-100">Registro</h5>
        </div>
        <div class="card-body">
            @*Filtro*@
            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>B&uacute;squeda</strong></label>
                </div>
                <div class="col-md-5 d-flex align-items-end justify-content-end aling-items-end mt-3 mt-md-0">
                    <a href="/Registro/Create" class="btn btn-success bi bi-plus-circle"> Crear</a>
                </div>
            </div>
            <div class=" row align-items-center mb-3">
                <div class=" col-3">
                    <ImputSelect class="form-select" @bind-value= "Filtro">
                        <option value="" selected disabled>Elija Una Opci&oacute;</option>
                        <option value="Id">Id</option>

                    </ImputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <i class="bi bi-search"></i> Buscar
                        </button>
                    </div>
                </div>
                
            </div>
            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <label class="col-form-label"><strong>Rango de Fechas</strong></label>
                </div>
                <div class="col-9">
                    <div class="d-flex align-items-center gap-2">
                        <input type="date" class="form-control flex-grow-0" style="width: 140px;" @bind="FechaDesde" />
                        <span class="text-muted">a</span>
                        <input type="date" class="form-control flex-grow-0" style="width: 140px;" @bind="FechaHasta" />
                        <button type="button" class="btn btn-info ms-2" @onclick="FiltrarPorFecha">
                            <i class="bi bi-filter"></i> Aplicar
                        </button>
                    </div>
                </div>
               
        </div>  
        @*Tabla*@
        <div class="table-responsive">
            <table class="table table-hover ">
               <thead class="table table-striped text-black">
                   <tr>
                       <th>ID</th>
                       <th>Editar</th>

                   </tr>

               </thead>
               <tbody>
                        @if (ListaRegistro != null && ListaResgistro.Any())
                        {
                            @foreach (var item in ListaRegistro)
                            {
                                <tr>
                                    <td>@item.Id</td>

                                    <td>
                                        <a href="/Clientes/Edit/@registro.RegistroId"
                                           class="btn btn-outline-primary bi bi-pencil-square"
                                           title="Editar registro">
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="1" class="text-center">No hay registros disponibles.</td>
                                
                            </tr>
                        }
               </tbody>

            </table>

        </div>
            <div class="card-footer space-between">
                <label>Cantidad de Registro: @(Listaregistro?.Count() ?? 0)</label>
            </div>
    </div>  
</div>  
</div>



@code {
    public Registro registro = new Registro();
    public List<Registro> ListaRegistro = new List<Registro>();
    public List<Registro> ListaFiltrada = new List<Registro>();

    public string Filtro { get; set; } = "";
    public string ValorFiltro { get; set; } = "";
    public DateTime? FechaDesde { get; set; }
    public DateTime? FechaHasta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarRegistros();
    }

    private async Task CargarRegistros()
    {
        ListaRegistro = await registroService.Listar(p => true);
        ListaFiltrada = ListaRegistro; 
    }

    
    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(Filtro) || string.IsNullOrWhiteSpace(ValorFiltro))
        {
            ListaFiltrada = ListaRegistro;
            return;
        }

        switch (Filtro)
        {
            case "Id":
                if (int.TryParse(ValorFiltro, out int id))
                {
                    ListaFiltrada = ListaRegistro.Where(r => r.Id == id).ToList();
                }
                break;
            
            default:
                ListaFiltrada = ListaRegistro;
                break;
        }
    }

   
    private async Task FiltrarPorFecha()
    {
        if (FechaDesde == null && FechaHasta == null)
        {
            ListaFiltrada = ListaRegistro;
            return;
        }

       
        if (FechaHasta == null)
        {
            ListaFiltrada = ListaRegistro.Where(r => r.Fecha >= FechaDesde).ToList();
            return;
        }

        
        if (FechaDesde == null)
        {
            ListaFiltrada = ListaRegistro.Where(r => r.Fecha <= FechaHasta).ToList();
            return;
        }

        
        ListaFiltrada = ListaRegistro.Where(r => r.Fecha >= FechaDesde && r.Fecha <= FechaHasta).ToList();
    }

   
    private async Task LimpiarFiltros()
    {
        Filtro = "";
        ValorFiltro = "";
        FechaDesde = null;
        FechaHasta = null;
        ListaFiltrada = ListaRegistro;
    }
}