@page "/Aportes/Index"
@inject AportesService aporteService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-between align-items-center position-relative">
            <h5 class="card-title mb-0 text-center w-100">Aporte</h5>
        </div>
        <div class="card-body">
            @* Filtro *@
            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
                <div class="col-md-5 d-flex align-items-end justify-content-end mt-3 mt-md-0">
                    <a href="/Aportes/Create" class="btn btn-success bi bi-plus-circle"> Crear</a>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" disabled selected>Elija una opción</option>
                        <option value="AporteId">Id</option>
                        <option value="Nombre">Nombre</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <i class="bi bi-search"></i> Buscar
                        </button>
                        <button type="button" class="btn btn-secondary ms-1" @onclick="LimpiarFiltros">
                            <i class="bi bi-x-circle"></i> Limpiar
                        </button>
                    </div>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <label class="col-form-label"><strong>Rango de Fechas</strong></label>
                </div>
                <div class="col-9">
                    <div class="d-flex align-items-center gap-2">
                        <input type="date" class="form-control" style="width: 140px;" @bind="FechaDesde" />
                        <span class="text-muted">a</span>
                        <input type="date" class="form-control" style="width: 140px;" @bind="FechaHasta" />
                        <button type="button" class="btn btn-info ms-2" @onclick="FiltrarPorFecha">
                            <i class="bi bi-filter"></i> Aplicar
                        </button>
                    </div>
                </div>
            </div>

            @* Tabla *@
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>AporteId</th>
                            <th>Fecha</th>
                            <th>Nombre</th>
                            <th>Monto</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (ListaFiltrada != null && ListaFiltrada.Any())
                        {
                            @foreach (var aporte in ListaFiltrada)
                            {
                                <tr>
                                    <td>@aporte.AporteId</td>
                                    <td>@aporte.Fecha.ToShortDateString()</td>
                                    <td>@aporte.Nombre</td>
                                    <td>@aporte.Monto.ToString("C")</td>
                                    <td>
                                        <a href="/Aportes/Edit/@aporte.AporteId"
                                           class="btn btn-outline-primary bi bi-pencil-square"
                                           title="Editar Aporte">
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" class="text-center">No hay aportes disponibles.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="card-footer space-between">
                <label>Cantidad de Aportes: @(ListaFiltrada?.Count() ?? 0)</label>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Aportes> ListaAporte = new();
    private List<Aportes> ListaFiltrada = new();

    private string Filtro { get; set; } = "";
    private string ValorFiltro { get; set; } = "";
    private DateTime? FechaDesde { get; set; }
    private DateTime? FechaHasta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarAportes();
    }

    private async Task CargarAportes()
    {
        ListaAporte = await aporteService.Listar(); 
        ListaFiltrada = ListaAporte;
    }

    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(Filtro) || string.IsNullOrWhiteSpace(ValorFiltro))
        {
            ListaFiltrada = ListaAporte;
            return;
        }

        switch (Filtro)
        {
            case "AporteId":
                if (int.TryParse(ValorFiltro, out int id))
                {
                    ListaFiltrada = ListaAporte.Where(a => a.AporteId == id).ToList();
                }
                break;
            case "Nombre":
                ListaFiltrada = ListaAporte
                    .Where(a => a.Nombre.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase))
                    .ToList();
                break;
            default:
                ListaFiltrada = ListaAporte;
                break;
        }
    }

    private async Task FiltrarPorFecha()
    {
        if (FechaDesde == null && FechaHasta == null)
        {
            ListaFiltrada = ListaAporte;
            return;
        }

        ListaFiltrada = ListaAporte.Where(a =>
            (FechaDesde == null || a.Fecha.Date >= FechaDesde.Value.Date) &&
            (FechaHasta == null || a.Fecha.Date <= FechaHasta.Value.Date)
        ).ToList();
    }

    private async Task LimpiarFiltros()
    {
        Filtro = "";
        ValorFiltro = "";
        FechaDesde = null;
        FechaHasta = null;
        ListaFiltrada = ListaAporte;
    }
}
